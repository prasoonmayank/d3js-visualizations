D3 js is built using functional style js rather than object oriented or procedural oriented js styles.

Functions in js are objects. The only difference between the normal objects and the functions as objects is that, the function objects can be invoked, and further associated with two properties, function context and function code.

Arguments variable is a built-in hidden parameter that is available to functions when they are invoked. The arguments variable contains all arguments for a function invokation in an array.

Function chaining:
It is a function invocation pattern increasingly used in d3.js where the successive functions are chained to each other, such that they are implemented one after the other. This is one of the bigger advantages of using js.

Selection:
Selection helps to target certain visual elements in the page. The w3c selector APIs have their limitations when it comes to web development, when it comes to data visualization.

.each function:
.each is used as the iterator for the selection. It takes two optional paramters d and i with one more hidden parameter called this. d refers to the datum bound to the element. i is the index number of the object being iterated through.

Subselection is really important in all cases. The > or < sign is used for all of these possibilities. The > sign implies that the element in the left object.

The raw selection is not making sense

Dealing with data can be understood as binding array as data, binding object literals as data, binding functions as data, working with arrays, filtering with data, sorting with data and loading data from server.

The major difference between data and information is that data is raw information.

The best way to define data for visualization is through javascript arrays.

Understanding enter, exit and update:
By applying data(), we join data elements and DOM elements to each other.
If the number of items in the dataset are more than the number of available DOM elements, the surplus items are stored in a subset of this selection called the enter selection.
The opposite thing happens when using the exit selection in this case. There the number of items in the dataset is more than the number of available DOM elements. 
enter is used to calculate A-B, while exit is used to calculate B-A. Here, A is the number of data elements while B is the number of DOM elements.

Data-driving the visualization means that we can have dynamic function to compute the value of the data on the go.
